#Задание 1
#Напишите запрос к учебной базе данных, 
#который вернёт процентное отношение общего размера всех индексов к общему размеру всех таблиц.

SELECT *
FROM information_schema.tables
WHERE table_schema = 'sakila' 

# length возвращает длину выражения в байтах

SELECT 
ROUND(((SUM(index_length)) / 1024 / 1024), 2) as 'размер всех индексов, Mb',  
ROUND(((SUM(data_length+index_length)) / 1024 / 1024),2) as 'размер всех таблиц, Mb',
ROUND((SUM(index_length))*100 / (SUM(data_length+index_length)),2) as 'отношение, %'
FROM information_schema.tables
WHERE table_schema = 'sakila' 


#Задание 2
# Выполните explain analyze следующего запроса:
EXPLAIN ANALYZE
select distinct concat(c.last_name, ' ', c.first_name), sum(p.amount) over (partition by c.customer_id, f.title)
from payment p, rental r, customer c, inventory i, film f
where date(p.payment_date) = '2005-07-30' and p.payment_date = r.rental_date and r.customer_id = c.customer_id and i.inventory_id = r.inventory_id

#перечислите узкие места;


| EXPLAIN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |

| -> Table scan on <temporary>  (cost=2.50..2.50 rows=0) (actual time=17461.197..17461.284 rows=391 loops=1)
    -> Temporary table with deduplication  (cost=0.00..0.00 rows=0) (actual time=17461.192..17461.192 rows=391 loops=1)
        -> Window aggregate with buffering: sum(payment.amount) OVER (PARTITION BY c.customer_id,f.title )   (actual time=11897.090..17117.097 rows=642000 loops=1)
            -> Sort: c.customer_id, f.title  (actual time=11892.197..11990.249 rows=642000 loops=1)
                -> Stream results  (cost=10074438.46 rows=15587935) (actual time=0.728..2455.734 rows=642000 loops=1)
                    -> Nested loop inner join  (cost=10074438.46 rows=15587935) (actual time=0.721..2099.369 rows=642000 loops=1)
                        -> Nested loop inner join  (cost=8511747.97 rows=15587935) (actual time=0.716..1857.859 rows=642000 loops=1)
                            -> Nested loop inner join  (cost=6949057.48 rows=15587935) (actual time=0.709..1592.726 rows=642000 loops=1)
                                -> Inner hash join (no condition)  (cost=1540183.80 rows=15400000) (actual time=0.693..62.912 rows=634000 loops=1)
                                    -> Filter: (cast(p.payment_date as date) = '2005-07-30')  (cost=1.61 rows=15400) (actual time=0.043..8.993 rows=634 loops=1)
                                        -> Table scan on p  (cost=1.61 rows=15400) (actual time=0.030..6.436 rows=16044 loops=1)
                                    -> Hash
                                        -> Covering index scan on f using idx_title  (cost=112.00 rows=1000) (actual time=0.118..0.479 rows=1000 loops=1)
                                -> Covering index lookup on r using rental_date (rental_date=p.payment_date)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=634000)
                            -> Single-row index lookup on c using PRIMARY (customer_id=r.customer_id)  (cost=0.00 rows=1) (actual time=0.000..0.000 rows=1 loops=642000)
                        -> Single-row covering index lookup on i using PRIMARY (inventory_id=r.inventory_id)  (cost=0.00 rows=1) (actual time=0.000..0.000 rows=1 loops=642000)
 |

1 row in set (17.47 sec)

# оптимизируйте запрос: внесите корректировки по использованию операторов, при необходимости добавьте индексы.


select distinct concat(c.last_name, ' ', c.first_name), sum(p.amount)
from customer c
INNER JOIN
  (select customer_id, amount 
   from payment
   where  date(payment_date) = '2005-07-30') p 
ON c.customer_id = p.customer_id
GROUP BY concat(c.last_name, ' ', c.first_name);


EXPLAIN ANALYZE
    select distinct concat(c.last_name, ' ', c.first_name), sum(p.amount)
    from customer c
    INNER JOIN
      (select customer_id, amount 
       from payment
       where  date(payment_date) = '2005-07-30') p 
    ON c.customer_id = p.customer_id
    GROUP BY concat(c.last_name, ' ', c.first_name);
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
||
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| -> Sort with duplicate removal: `concat(c.last_name, ' ', c.first_name)`, `sum(p.amount)`  (actual time=32.025..32.101 rows=391 loops=1)
    -> Table scan on <temporary>  (actual time=31.540..31.644 rows=391 loops=1)
        -> Aggregate using temporary table  (actual time=31.538..31.538 rows=391 loops=1)
            -> Nested loop inner join  (cost=5451.15 rows=15400) (actual time=0.534..29.958 rows=634 loops=1)
                -> Table scan on c  (cost=61.15 rows=599) (actual time=0.251..0.576 rows=599 loops=1)
                -> Filter: (cast(payment.payment_date as date) = '2005-07-30')  (cost=6.43 rows=26) (actual time=0.043..0.049 rows=1 loops=599)
                    -> Index lookup on payment using idx_fk_customer_id (customer_id=c.customer_id)  (cost=6.43 rows=26) (actual time=0.038..0.045 rows=27 loops=599)
 |

1 row in set (0.04 sec)



